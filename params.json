{"name":"Django-wham","tagline":"REST APIs disguised as Django ORM Models","body":"django-wham\r\n===========\r\n**REST APIs disguised as Django ORM Models**\r\n\r\n\r\nWith django-wham you can query REST APIs in exactly the same way you query Django Models:\r\n\r\n\r\n```\r\n>>> artist = SpotifyArtist.objects.get(id='5Z1XZyEFY0dewG8faEIiEx')\r\nfetching https://api.spotify.com/v1/artists/5Z1XZyEFY0dewG8faEIiEx\r\n>>> print artist.name\r\nDjango Reinhardt\r\n```\r\n\r\n```\r\n>>> twitter_user = TwitterUser.objects.get(screen_name='djangoproject')\r\nfetching https://api.twitter.com/1.1/users/show.json?screen_name=djangoproject\r\n>>> for tweet in twitter_user.tweets.all():\r\n>>>     print tweet.text\r\nfetching https://api.twitter.com/1.1/statuses/user_timeline.json?user_id=191225303\r\nDjango 1.7 release candidate 2 - It's almost here! Today we're pleased to announce the second release-candidate pa...\r\nDjango 1.7 release candidate 1 - It's almost here! Tonight we're pleased to announce the first release-candidate p...\r\n...\r\n```\r\n\r\n### Creating Django Wham Models\r\n\r\nIn order to query a REST API (eg: Twitter, Flickr, Youtube, etc), you need a Wham Model. A Wham Model corresponds to an API Endpoint and has a special inner WhamMeta class that describes how the REST API should map to the Django Model.\r\n\r\n\r\nThis simple Wham Model that enables you too look up a Spotify Artist by its Spotify ID and retrieve some information about that artist.\r\nIn this case the names of the fields match the property names of the retrieved JSON data, so very little configuration is required.\r\n\r\n```\r\nfrom wham.models import WhamModel\r\n\r\nclass SpotifyArtist(WhamModel):\r\n\r\n    id = CharField(max_length=100, primary_key=True) \r\n        # the primary key field should be of the same name and type as the API Endpoint ID\r\n        # rather than the default auto-incrementing key Django provides. For example,\r\n        # '5Z1XZyEFY0dewG8faEIiEx' is the Spotify ID for Django Reinhardt.\r\n    name = TextField()\r\n    href = TextField()\r\n    popularity = IntegerField()\r\n    uri = UriField()\r\n\r\n    class WhamMeta(SpotifyMeta):\r\n        base_url = 'https://api.spotify.com/v1/'\r\n        endpoint = 'artists'\r\n```\r\n\r\nNow we add another Spotify Endpoint, this time both of the Models' WhamMeta class inherit from a single class,\r\nto share commonalities between endpoints such as the base url\r\n```\r\nclass SpotifyWhamMeta:\r\n    base_url = 'https://api.spotify.com/v1/'\r\n\r\nclass SpotifyArtist(WhamModel):\r\n    ...\r\n    \r\n    class WhamMeta(SpotifyWhamMeta):\r\n        endpoint = 'artists'\r\n\r\nclass SpotifyAlbum(WhamModel):\r\n\r\n    id = WhamCharField(max_length=255, primary_key=True)\r\n    name = WhamTextField()\r\n    release_date = WhamTextField(null=True)\r\n    popularity = WhamIntegerField(null=True, wham_detailed=True)\r\n\r\n    class WhamMeta(SpotifyWhamMeta):\r\n        endpoint = 'albums'\r\n\r\n```\r\n\r\n### Many To Many Endpoints\r\n\r\nDjango Wham supports many to many endpoints such as `https://api.spotify.com/v1/artists/{id}/albums`.\r\nThis is possible by specifying a WhamManyToMany field and doing a little configuration.\r\n\r\nTo create a many to many field between Artists and Albums:\r\n\r\n```\r\nclass SpotifyArtist(WhamModel):\r\n    ...\r\n    \r\n    albums = WhamManyToManyField(\r\n        'SpotifyAlbum',\r\n        wham_endpoint='artists/{{id}}/albums', #django template syntax is used to substitue the value of thd id\r\n        wham_results_path=['items'] \r\n            # This is the 'path' where to find the list of results in the retreived JSON data.\r\n            # The list or tuple represents a path in the JSON tree. A hypothetical example might be ['photos', 'results']\r\n    )\r\n    \r\n    ...\r\n\r\n```\r\n\r\n\r\n### Wham Model Repository\r\n\r\nHave a look at https://github.com/mbylstra/django-wham/tree/master/wham/apis for some more examples of Wham Models. We're hoping this will become an ever growing repository of Wham Models for the multitude of public REST APIs on the web, so you won't have to write your own. If you have ever wanted to contribute to open source, but have been too daunted, creating a Wham Model is a fun and easy way to get started. Only basic Django experience is required.\r\n\r\n### Installation and use of Wham Models\r\n\r\nUntil Django Wham has been hosted on PyPI so you can use `pip` (coming soon!), you can give Django Wham a spin by downloading the source code and copying the wham directory (it's a Django App) into your Django project.\r\n\r\n```\r\na_django_project\r\n├── project\r\n├── wham #copy the wham directory into your django project\r\n└── settings.py\r\n\r\n\r\n```\r\n\r\nadd some entries to your INSTALLED_APPS in your settings.py file\r\n```\r\nINSTALLED_APPS = (\r\n    ...\r\n    'wham', #required\r\n    'wham.apis.spotify', #an optional provided API\r\n    'wham.apis.twitter', #optional\r\n    'your_custom_wham_app' #this should be a Django app with one or more Wham Models in its models.py file\r\n    ...\r\n)\r\n\r\n```\r\nDjango wham models can be used just like regular Django Models\r\n```\r\nfrom wham.apis.spotify import SpotifyArtist\r\nSpotifyArtist.objects.filter(name__icontains=\"green\")\r\n```\r\n\r\n### demo\r\n\r\nThis git repository also comes with a demo django project and some Ipython notebook examples that can be run with `django manage.py shell_plus --notebook`. Your environment must have the packages in ipython-requirements.txt installed for this to work. \r\n\r\n\r\n### More Info\r\n- [here are some slides about django-wham](http://slides.com/mbylstra/django-wham)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}